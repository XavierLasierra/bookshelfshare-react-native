// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Given an App component When it is triggered Then should match the snapshot 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
        undefined,
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RNCSafeAreaProvider
        onInsetsChange={[Function]}
        style={
          Array [
            Object {
              "flex": 1,
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "rgb(242, 242, 242)",
                "flex": 1,
              },
              undefined,
            ]
          }
        >
          <View
            onLayout={[Function]}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                }
              }
            >
              <View
                collapsable={false}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              />
              <View
                accessibilityElementsHidden={false}
                closing={false}
                gestureVelocityImpact={0.3}
                importantForAccessibility="auto"
                onClose={[Function]}
                onGestureBegin={[Function]}
                onGestureCanceled={[Function]}
                onGestureEnd={[Function]}
                onOpen={[Function]}
                onTransition={[Function]}
                pointerEvents="box-none"
                style={
                  Array [
                    Object {
                      "display": "flex",
                      "overflow": undefined,
                    },
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    },
                  ]
                }
                transitionSpec={
                  Object {
                    "close": Object {
                      "animation": "spring",
                      "config": Object {
                        "damping": 500,
                        "mass": 3,
                        "overshootClamping": true,
                        "restDisplacementThreshold": 10,
                        "restSpeedThreshold": 10,
                        "stiffness": 1000,
                      },
                    },
                    "open": Object {
                      "animation": "spring",
                      "config": Object {
                        "damping": 500,
                        "mass": 3,
                        "overshootClamping": true,
                        "restDisplacementThreshold": 10,
                        "restSpeedThreshold": 10,
                        "stiffness": 1000,
                      },
                    },
                  }
                }
              >
                <View
                  collapsable={false}
                  nativeID="animatedComponent"
                  pointerEvents="box-none"
                  style={
                    Object {
                      "flex": 1,
                      "marginTop": 0,
                    }
                  }
                >
                  <View
                    enableTrackpadTwoFingerGesture={true}
                    enabled={false}
                    hitSlop={
                      Object {
                        "right": -700,
                      }
                    }
                    maxDeltaY={20}
                    minOffsetX={5}
                    onHandlerStateChange={[Function]}
                  >
                    <View
                      needsOffscreenAlphaCompositing={true}
                      style={
                        Object {
                          "flex": 1,
                          "opacity": 1,
                          "transform": Array [
                            Object {
                              "translateY": 0,
                            },
                          ],
                        }
                      }
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "flex": 1,
                              "overflow": "hidden",
                            },
                            Array [
                              Object {
                                "backgroundColor": "rgb(242, 242, 242)",
                              },
                              undefined,
                            ],
                          ]
                        }
                      >
                        <View
                          style={
                            Object {
                              "flex": 1,
                              "flexDirection": "column-reverse",
                            }
                          }
                        >
                          <View
                            style={
                              Object {
                                "flex": 1,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "flex": 1,
                                }
                              }
                            >
                              <RCTSafeAreaView
                                emulateUnlessSupported={true}
                                style={
                                  Object {
                                    "alignItems": "center",
                                    "backgroundColor": "#D9D8C4",
                                    "display": "flex",
                                    "height": "100%",
                                    "justifyContent": "center",
                                  }
                                }
                              >
                                <View
                                  style={
                                    Object {
                                      "alignItems": "center",
                                      "height": 30,
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                  >
                                    <IconMock
                                      height={60}
                                      width={60}
                                    />
                                  </View>
                                </View>
                              </RCTSafeAreaView>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
          <View
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 1,
              }
            }
          />
        </View>
      </RNCSafeAreaProvider>
    </View>
    <View
      pointerEvents="none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      collapsable={false}
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </RCTSafeAreaView>
</View>
`;
