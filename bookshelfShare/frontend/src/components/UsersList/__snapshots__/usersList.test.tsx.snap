// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Given a UsersList component When it is rendered And userList results is false Then should match the snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "left": 20,
        "opacity": 1,
        "position": "absolute",
        "top": 20,
        "zIndex": 1,
      }
    }
    testID="backButton"
  >
    <IconMock
      height={30}
      style={
        Object {
          "transform": Array [
            Object {
              "rotateZ": "180deg",
            },
          ],
        }
      }
      width={30}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "backgroundColor": "#F5F5F5",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#D9D8C4",
          "borderBottomLeftRadius": 25,
          "justifyContent": "center",
          "padding": 10,
          "width": "100%",
        }
      }
    >
      <IconMock
        height={45}
        width={45}
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#D9D8C4",
            "height": 20,
            "width": 20,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#F5F5F5",
              "borderTopRightRadius": 25,
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "paddingHorizontal": 30,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingVertical": 10,
            "width": "100%",
          }
        }
      >
        <TextInput
          maxLength={25}
          onChangeText={[Function]}
          placeholder="Search new users by email/name"
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#ECECEC",
              "borderRadius": 10,
              "borderWidth": 1,
              "fontSize": 16,
              "height": "100%",
              "paddingHorizontal": 20,
              "width": "85%",
            }
          }
          testID="searchInput"
          value=""
        />
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          nativeID="animatedComponent"
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="searchButton"
        >
          <IconMock
            height={35}
            width={35}
          />
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
        }
      }
    >
      <ActivityIndicator
        color="#000000"
        size="large"
        testID="activityIndicator"
      />
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`Given a UsersList component When it is rendered And userList results is true And there are no users Then should match the snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "left": 20,
        "opacity": 1,
        "position": "absolute",
        "top": 20,
        "zIndex": 1,
      }
    }
    testID="backButton"
  >
    <IconMock
      height={30}
      style={
        Object {
          "transform": Array [
            Object {
              "rotateZ": "180deg",
            },
          ],
        }
      }
      width={30}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "backgroundColor": "#F5F5F5",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#D9D8C4",
          "borderBottomLeftRadius": 25,
          "justifyContent": "center",
          "padding": 10,
          "width": "100%",
        }
      }
    >
      <IconMock
        height={45}
        width={45}
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#D9D8C4",
            "height": 20,
            "width": 20,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#F5F5F5",
              "borderTopRightRadius": 25,
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "paddingHorizontal": 30,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingVertical": 10,
            "width": "100%",
          }
        }
      >
        <TextInput
          maxLength={25}
          onChangeText={[Function]}
          placeholder="Search new users by email/name"
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#ECECEC",
              "borderRadius": 10,
              "borderWidth": 1,
              "fontSize": 16,
              "height": "100%",
              "paddingHorizontal": 20,
              "width": "85%",
            }
          }
          testID="searchInput"
          value=""
        />
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          nativeID="animatedComponent"
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="searchButton"
        >
          <IconMock
            height={35}
            width={35}
          />
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
        }
      }
    >
      <Text>
        0 users
      </Text>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`Given a UsersList component When it is rendered And userList results is true And there are users And you type on searchInput And you press searchButton And searchResults are loaded And you press clearSearchButton Then should match the snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "left": 20,
        "opacity": 1,
        "position": "absolute",
        "top": 20,
        "zIndex": 1,
      }
    }
    testID="backButton"
  >
    <IconMock
      height={30}
      style={
        Object {
          "transform": Array [
            Object {
              "rotateZ": "180deg",
            },
          ],
        }
      }
      width={30}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "backgroundColor": "#F5F5F5",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#D9D8C4",
          "borderBottomLeftRadius": 25,
          "justifyContent": "center",
          "padding": 10,
          "width": "100%",
        }
      }
    >
      <IconMock
        height={45}
        width={45}
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#D9D8C4",
            "height": 20,
            "width": 20,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#F5F5F5",
              "borderTopRightRadius": 25,
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "paddingHorizontal": 30,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingVertical": 10,
            "width": "100%",
          }
        }
      >
        <TextInput
          maxLength={25}
          onChangeText={[Function]}
          placeholder="Search new users by email/name"
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#ECECEC",
              "borderRadius": 10,
              "borderWidth": 1,
              "fontSize": 16,
              "height": "100%",
              "paddingHorizontal": 20,
              "width": "85%",
            }
          }
          testID="searchInput"
          value=""
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="searchButton"
        >
          <IconMock
            height={35}
            width={35}
          />
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
        }
      }
    >
      <RCTScrollView
        ListFooterComponent={[Function]}
        data={
          Array [
            Object {
              "_id": "3",
            },
          ]
        }
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        viewabilityConfigCallbackPairs={Array []}
      >
        <View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#E4FDFF",
                  "borderColor": "#ECECEC",
                  "borderRadius": 20,
                  "borderWidth": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginVertical": 10,
                  "opacity": 1,
                  "padding": 10,
                  "width": 325,
                }
              }
              testID="userDetailButton"
            >
              <Image
                source={
                  Object {
                    "uri": undefined,
                  }
                }
                style={
                  Object {
                    "borderRadius": 100,
                    "height": 75,
                    "width": 75,
                  }
                }
              />
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "justifyContent": "space-between",
                    "width": 200,
                  }
                }
              >
                <View
                  style={Object {}}
                >
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                      }
                    }
                  />
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                      }
                    }
                  />
                </View>
                <View
                  accessible={true}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                  testID="deleteFollowingButton"
                >
                  <IconMock
                    height={30}
                    width={30}
                  />
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
          >
            <View
              style={
                Object {
                  "height": 550,
                  "width": "100%",
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`Given a UsersList component When it is rendered And userList results is true And there are users And you type on searchInput And you press searchButton And searchResults are loaded And you press searchButton with searchInput empty Then should match the snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "left": 20,
        "opacity": 1,
        "position": "absolute",
        "top": 20,
        "zIndex": 1,
      }
    }
    testID="backButton"
  >
    <IconMock
      height={30}
      style={
        Object {
          "transform": Array [
            Object {
              "rotateZ": "180deg",
            },
          ],
        }
      }
      width={30}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "backgroundColor": "#F5F5F5",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#D9D8C4",
          "borderBottomLeftRadius": 25,
          "justifyContent": "center",
          "padding": 10,
          "width": "100%",
        }
      }
    >
      <IconMock
        height={45}
        width={45}
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#D9D8C4",
            "height": 20,
            "width": 20,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#F5F5F5",
              "borderTopRightRadius": 25,
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "paddingHorizontal": 30,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingVertical": 10,
            "width": "100%",
          }
        }
      >
        <TextInput
          maxLength={25}
          onChangeText={[Function]}
          placeholder="Search new users by email/name"
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#ECECEC",
              "borderRadius": 10,
              "borderWidth": 1,
              "fontSize": 16,
              "height": "100%",
              "paddingHorizontal": 20,
              "width": "85%",
            }
          }
          testID="searchInput"
          value=""
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="searchButton"
        >
          <IconMock
            height={35}
            width={35}
          />
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
        }
      }
    >
      <RCTScrollView
        ListFooterComponent={[Function]}
        data={
          Array [
            Object {
              "_id": "3",
            },
          ]
        }
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        viewabilityConfigCallbackPairs={Array []}
      >
        <View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#E4FDFF",
                  "borderColor": "#ECECEC",
                  "borderRadius": 20,
                  "borderWidth": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginVertical": 10,
                  "opacity": 1,
                  "padding": 10,
                  "width": 325,
                }
              }
              testID="userDetailButton"
            >
              <Image
                source={
                  Object {
                    "uri": undefined,
                  }
                }
                style={
                  Object {
                    "borderRadius": 100,
                    "height": 75,
                    "width": 75,
                  }
                }
              />
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "justifyContent": "space-between",
                    "width": 200,
                  }
                }
              >
                <View
                  style={Object {}}
                >
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                      }
                    }
                  />
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                      }
                    }
                  />
                </View>
                <View
                  accessible={true}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                  testID="deleteFollowingButton"
                >
                  <IconMock
                    height={30}
                    width={30}
                  />
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
          >
            <View
              style={
                Object {
                  "height": 550,
                  "width": "100%",
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`Given a UsersList component When it is rendered And userList results is true And there are users Then should match the snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "left": 20,
        "opacity": 1,
        "position": "absolute",
        "top": 20,
        "zIndex": 1,
      }
    }
    testID="backButton"
  >
    <IconMock
      height={30}
      style={
        Object {
          "transform": Array [
            Object {
              "rotateZ": "180deg",
            },
          ],
        }
      }
      width={30}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "flex-end",
        "backgroundColor": "#F5F5F5",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#D9D8C4",
          "borderBottomLeftRadius": 25,
          "justifyContent": "center",
          "padding": 10,
          "width": "100%",
        }
      }
    >
      <IconMock
        height={45}
        width={45}
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#D9D8C4",
            "height": 20,
            "width": 20,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#F5F5F5",
              "borderTopRightRadius": 25,
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "paddingHorizontal": 30,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingVertical": 10,
            "width": "100%",
          }
        }
      >
        <TextInput
          maxLength={25}
          onChangeText={[Function]}
          placeholder="Search new users by email/name"
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#ECECEC",
              "borderRadius": 10,
              "borderWidth": 1,
              "fontSize": 16,
              "height": "100%",
              "paddingHorizontal": 20,
              "width": "85%",
            }
          }
          testID="searchInput"
          value=""
        />
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          nativeID="animatedComponent"
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="searchButton"
        >
          <IconMock
            height={35}
            width={35}
          />
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
        }
      }
    >
      <RCTScrollView
        ListFooterComponent={[Function]}
        data={
          Array [
            Object {
              "_id": "1",
              "email": "xlp1998@gmail.com",
              "photo": "photo",
              "username": "Xavier Lasierra",
            },
            Object {
              "_id": "2",
              "email": "mail@gmail.com",
              "photo": "photo",
              "username": "Juan",
            },
            Object {
              "_id": "3",
              "email": "mail@gmail.com",
              "photo": "photo",
              "username": "Jose",
            },
          ]
        }
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        viewabilityConfigCallbackPairs={Array []}
      >
        <View>
          <View
            onLayout={[Function]}
            style={null}
          />
          <View
            onLayout={[Function]}
            style={null}
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              nativeID="animatedComponent"
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#ECECEC",
                  "borderRadius": 20,
                  "borderWidth": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginVertical": 10,
                  "opacity": 1,
                  "padding": 10,
                  "width": 325,
                }
              }
              testID="userDetailButton"
            >
              <Image
                source={
                  Object {
                    "uri": "photo",
                  }
                }
                style={
                  Object {
                    "borderRadius": 100,
                    "height": 75,
                    "width": 75,
                  }
                }
              />
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "justifyContent": "space-between",
                    "width": 200,
                  }
                }
              >
                <View
                  style={Object {}}
                >
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                      }
                    }
                  >
                    Juan
                  </Text>
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                      }
                    }
                  >
                    mail@gmail.com
                  </Text>
                </View>
                <View
                  accessible={true}
                  collapsable={false}
                  focusable={true}
                  nativeID="animatedComponent"
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                  testID="addFollowingButton"
                >
                  <IconMock
                    height={30}
                    width={30}
                  />
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              nativeID="animatedComponent"
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#E4FDFF",
                  "borderColor": "#ECECEC",
                  "borderRadius": 20,
                  "borderWidth": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginVertical": 10,
                  "opacity": 1,
                  "padding": 10,
                  "width": 325,
                }
              }
              testID="userDetailButton"
            >
              <Image
                source={
                  Object {
                    "uri": "photo",
                  }
                }
                style={
                  Object {
                    "borderRadius": 100,
                    "height": 75,
                    "width": 75,
                  }
                }
              />
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "justifyContent": "space-between",
                    "width": 200,
                  }
                }
              >
                <View
                  style={Object {}}
                >
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                      }
                    }
                  >
                    Jose
                  </Text>
                  <Text
                    style={
                      Object {
                        "fontSize": 16,
                      }
                    }
                  >
                    mail@gmail.com
                  </Text>
                </View>
                <View
                  accessible={true}
                  collapsable={false}
                  focusable={true}
                  nativeID="animatedComponent"
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                  testID="deleteFollowingButton"
                >
                  <IconMock
                    height={30}
                    width={30}
                  />
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
          >
            <View
              style={
                Object {
                  "height": 550,
                  "width": "100%",
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;
