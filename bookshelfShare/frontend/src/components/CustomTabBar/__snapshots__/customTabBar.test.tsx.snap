// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Given a CustomTabBar component When it is rendered And state.index is 0 Then should match the snapshot 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
        undefined,
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#FFFFFF",
          "flexDirection": "row",
          "height": 60,
          "justifyContent": "space-around",
        }
      }
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#F5F5F5",
            "borderRadius": 50,
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="homeButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          home
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="followingButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          following
        </Text>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "borderRadius": 50,
            "elevation": 2,
            "height": 60,
            "justifyContent": "center",
            "position": "relative",
            "top": -10,
            "width": 60,
          }
        }
      >
        <View
          collapsable={false}
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID="openMenuButton"
          >
            <View
              ctx={
                Object {
                  "menuActions": Object {
                    "_getOpenedMenu": [Function],
                    "_notify": [Function],
                    "closeMenu": [Function],
                    "isMenuOpen": [Function],
                    "openMenu": [Function],
                    "toggleMenu": [Function],
                  },
                  "menuRegistry": Object {
                    "getAll": [Function],
                    "getMenu": [Function],
                    "setOptionsCustomStyles": [Function],
                    "subscribe": [Function],
                    "unsubscribe": [Function],
                    "updateLayoutInfo": [Function],
                  },
                }
              }
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            >
              <Text
                style={
                  Object {
                    "color": "#3E3C37",
                    "fontSize": 30,
                    "height": 60,
                    "lineHeight": 60,
                    "textAlign": "center",
                    "width": 60,
                  }
                }
              >
                +
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="shelfButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          shelf
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="profileButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          profile
        </Text>
      </View>
    </View>
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      collapsable={false}
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </RCTSafeAreaView>
</View>
`;

exports[`Given a CustomTabBar component When it is rendered And state.index is 1 Then should match the snapshot 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
        undefined,
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#FFFFFF",
          "flexDirection": "row",
          "height": 60,
          "justifyContent": "space-around",
        }
      }
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="homeButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          home
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#F5F5F5",
            "borderRadius": 50,
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="followingButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          following
        </Text>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "borderRadius": 50,
            "elevation": 2,
            "height": 60,
            "justifyContent": "center",
            "position": "relative",
            "top": -10,
            "width": 60,
          }
        }
      >
        <View
          collapsable={false}
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID="openMenuButton"
          >
            <View
              ctx={
                Object {
                  "menuActions": Object {
                    "_getOpenedMenu": [Function],
                    "_notify": [Function],
                    "closeMenu": [Function],
                    "isMenuOpen": [Function],
                    "openMenu": [Function],
                    "toggleMenu": [Function],
                  },
                  "menuRegistry": Object {
                    "getAll": [Function],
                    "getMenu": [Function],
                    "setOptionsCustomStyles": [Function],
                    "subscribe": [Function],
                    "unsubscribe": [Function],
                    "updateLayoutInfo": [Function],
                  },
                }
              }
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            >
              <Text
                style={
                  Object {
                    "color": "#3E3C37",
                    "fontSize": 30,
                    "height": 60,
                    "lineHeight": 60,
                    "textAlign": "center",
                    "width": 60,
                  }
                }
              >
                +
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="shelfButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          shelf
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="profileButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          profile
        </Text>
      </View>
    </View>
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      collapsable={false}
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </RCTSafeAreaView>
</View>
`;

exports[`Given a CustomTabBar component When it is rendered And state.index is 2 Then should match the snapshot 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
        undefined,
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#FFFFFF",
          "flexDirection": "row",
          "height": 60,
          "justifyContent": "space-around",
        }
      }
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="homeButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          home
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="followingButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          following
        </Text>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "borderRadius": 50,
            "elevation": 2,
            "height": 60,
            "justifyContent": "center",
            "position": "relative",
            "top": -10,
            "width": 60,
          }
        }
      >
        <View
          collapsable={false}
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID="openMenuButton"
          >
            <View
              ctx={
                Object {
                  "menuActions": Object {
                    "_getOpenedMenu": [Function],
                    "_notify": [Function],
                    "closeMenu": [Function],
                    "isMenuOpen": [Function],
                    "openMenu": [Function],
                    "toggleMenu": [Function],
                  },
                  "menuRegistry": Object {
                    "getAll": [Function],
                    "getMenu": [Function],
                    "setOptionsCustomStyles": [Function],
                    "subscribe": [Function],
                    "unsubscribe": [Function],
                    "updateLayoutInfo": [Function],
                  },
                }
              }
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            >
              <Text
                style={
                  Object {
                    "color": "#3E3C37",
                    "fontSize": 30,
                    "height": 60,
                    "lineHeight": 60,
                    "textAlign": "center",
                    "width": 60,
                  }
                }
              >
                +
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#F5F5F5",
            "borderRadius": 50,
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="shelfButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          shelf
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="profileButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          profile
        </Text>
      </View>
    </View>
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      collapsable={false}
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </RCTSafeAreaView>
</View>
`;

exports[`Given a CustomTabBar component When it is rendered And state.index is 3 Then should match the snapshot 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
        undefined,
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#FFFFFF",
          "flexDirection": "row",
          "height": 60,
          "justifyContent": "space-around",
        }
      }
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="homeButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          home
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="followingButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          following
        </Text>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "borderRadius": 50,
            "elevation": 2,
            "height": 60,
            "justifyContent": "center",
            "position": "relative",
            "top": -10,
            "width": 60,
          }
        }
      >
        <View
          collapsable={false}
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID="openMenuButton"
          >
            <View
              ctx={
                Object {
                  "menuActions": Object {
                    "_getOpenedMenu": [Function],
                    "_notify": [Function],
                    "closeMenu": [Function],
                    "isMenuOpen": [Function],
                    "openMenu": [Function],
                    "toggleMenu": [Function],
                  },
                  "menuRegistry": Object {
                    "getAll": [Function],
                    "getMenu": [Function],
                    "setOptionsCustomStyles": [Function],
                    "subscribe": [Function],
                    "unsubscribe": [Function],
                    "updateLayoutInfo": [Function],
                  },
                }
              }
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            >
              <Text
                style={
                  Object {
                    "color": "#3E3C37",
                    "fontSize": 30,
                    "height": 60,
                    "lineHeight": 60,
                    "textAlign": "center",
                    "width": 60,
                  }
                }
              >
                +
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="shelfButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          shelf
        </Text>
      </View>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#F5F5F5",
            "borderRadius": 50,
            "height": 57,
            "justifyContent": "center",
            "opacity": 1,
            "width": 57,
          }
        }
        testID="profileButton"
      >
        <IconMock
          height={30}
          width={30}
        />
        <Text
          style={
            Object {
              "color": "#3E3C37",
              "fontSize": 12,
            }
          }
        >
          profile
        </Text>
      </View>
    </View>
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      collapsable={false}
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </RCTSafeAreaView>
</View>
`;
